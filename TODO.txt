
* wireup the controllers with the existing ui
* upgrade the ui libraries (webjars?)

* add/import functionality (remove old and implement new front/back)
* user messaging (add it back in ui and backend)

* photo details view
* photo albums views

* investigate shell commands
	* user management
	* server side import
* investigate actuator use
	* would be nice to have some sort of ui for this

* ui needs to work well on mobile (cell and tablet)

FIXME: date updated does not work under effigy

Consider the following while working the new ui/controller interface...

Photos

	POST /photo - add a new photo
		- image content and desired meta data including tags, albums
		- specified meta data will override any image metadata

	PUT /photo/{photoid} - update existing photo (may include image)

	GET /photo/{photoid}/image/{scale} - get image content for photo at scale
	- might move images to a separate controller

	GET /photo/{photoid} - get photo data (not image) for photo

	GET /photo[?offset={}&limit={}] - list photos (no images) with optional page offset/limit

	DELETE /photo/{photoid} - mark a photo and its images as "archived"

Albums

	POST /album - add a new album
		- content is data

	PUT /album/{albumid} - update existign album

	GET /album/{albumid} - get data for a specific album

	GET /album/{albumid}/photos[?offset={}&limit={}] - retrieve the photos for a specified album

	GET /album[?offset={}&limit={}] - list albums with optional page offset/limit

	DELETE /album/{albumid} - delete an album (not contents)

Tags

	POST /tag/{category}/{name} - add a new tag

	PUT /tag/{tagid}/{category}/{name}

	GET /tag/{tagid} - get data for a specific tag

	GET /tag/{tagids}/photos[?offset={}&limit={}] - tagids is comma-separated tagids to collect unique set of photos

	GET /tag[?offset={}&limit={}] - list tags with optional page offset/limit

	DELETE /tag/{tagid} - delete a tag (not contents)
